== Upgrading Repast Simphony Models

=== Updating from version 2.9.x to 2.10.0

Several third party libraries were updated and require minor changes to user models
code.  These include:

==== User models that use GeoTools and JTS classes
Reorganize java imports to reflect new package names by changing any import of:

* com.vividsolutions.jts.* to org.locationtech.jts.*

==== Java Units API 2.0
The https://jcp.org/en/jsr/detail?id=385[Java Units API] has been updated to version 2.0.
User model code that use the JScience *org.jscience.physics.amount.Amount* will need to
be updated to use the new *javax.measure.Quantity*.

For example, using the JScience Units API:
[source,java]
----
import org.jscience.physics.amount.Amount;
import static javax.measure.unit.SI.*;

Amount x = Amount.valueOf(150, METRE);
double y = x.doubleValue();
----

would need to be updated to the new Units 2.0 API:

[source,java]
----
import tech.units.indriya.quantity.Quantities;
import javax.measure.Quantity;
import static tech.units.indriya.unit.Units.METRE;

Quantity x = Quantities.getQuantity(150, METRE);
double y = x.getValue().doubleValue();
----

=== Updating from version 1.0, 1.1 or 1.2 model to run in Repast Simphony 2.0 and later
To upgrade scenarios simply do the following:

* Right click on the scenario folder (usually "yourmodelname.rs").
* Choose "Convert Scenario" from the popup menu.

This will create a *user\_path.xml* and a *context.xml* from your old Score file. 
It will also make backup copy of the scenario.xml file and then remove any displays 
from the scenario file. Removing the displays is necessary because old Piccolo 
2D displays will no longer load in version 2.0.

=== How can I convert my Repast J model to run in Repast Simphony?
A quick summary of the process of converting to Repast J to Repast S:

* Create a new Repast Simphony project or add the Repast nature to your existing project(see tutorial).
* Strip out all of the Repast J-specific visualization code from your agents (ie extends DefaultDrawableNode).
* Pick out the relative information such as scheduling and model parameters from the Repast J main class (ie SimpleModelImpl) and put this in the Repast S ContextBuilder or agent class constructors (where ever you see fit).
* Create a scenario/score model.
* Create displays, loggers, etc via the Repast S runtime interface.

Several of the demos (sugarscape and regression) included with Repast Simphony 
are direct ports from the Repast J models, so comparing these will provide some 
additional help on porting models.

