Agent Adaptation
----------------

.TODO
****
This section depends on the Flowchart editor and is therefore completely out of
data with the 2.5 release.  Needs updating with actual code examples.  We should
probably provide demo models for each.
****

Genetic Algorithms
~~~~~~~~~~~~~~~~~~

Repast Simphony (Repast S) uses the Java Genetic Algorithms Package (JGAP) 
(http://jgap.sourceforge.net/) to implement genetic algorithms. JGAP can be used 
directly within agents or the Repast S genetic algorithms (GA) wrapper can be 
used. Directly using JGAP provides maximum flexibility but requires more complex 
programming. The Repast S GA wrapper simplifies the use of JGAP while preserving 
most options. It is recommended that Repast S users start with the Repast S 
wrapper and, only if needed, eventually move to directly use of JGAP. The Repast 
S regression wrapper is consistent with direct use of JGAP so this should 
relatively straightforward. Obviously, as with all machine learning tools, it is 
important to make sure that genetic algorithms, in general, and the chosen
formulation, in particular, are appropriate for your application.

TIP: Documentation on how to use JGAP directly can be found on their web site, 
http://jgap.sourceforge.net/ In particular, please see the following page: http://jgap.sourceforge.net/doc/tutorial.html

.To use the Repast S GA wrapper in the visual editor simply follow these steps:

* Add a property of type "Genetic Algorithm" to an agent. "evaluate" is the name 
of the fitness function that needs to be created as described in step two. 
"populationSize" is the count of the members in the GA population. The "Gene" 
array gives the set of genes, either "IntegerGene" or "DoubleGene," to be used.
The parameters to the constructors (e.g., "min1" and "max1") are the optional 
lower and upper bounds for that gene. The template is as follows:

----
new RepastGA(this, "evaluate", populationSize, 
	new Gene[]{ new IntegerGene(min1, max1) new DoubleGene(min2, max2)})
----

* Add a behavior that takes a double precision array (i.e., "double[]"), returns 
an positive integer result, and that uses the fitness function name given above 
(e.g., "evaluate"). The double array is the current population member to be 
evaluated. The genes are in the same order as the template given in step one. 
Higher fitness result values mean greater fitness levels. The exact range does 
not matter as long as the numbers are positive.

* Using the Wizard dialog, chose "Advanced Adaptation," "Use a Genetic 
Algorithm," "Get the Best Solution from a Genetic Algorithm," and then fill in 
the form to get a solution. The returned double array is the current best 
solution. The genes are in the same order as the template given in step one.

* If the population needs to be reset, perhaps due to a plateau, using the 
Wizard dialog, chose "Advanced Adaptation," "Use a Genetic Algorithm," "Reset 
the Population of a Genetic Algorithm," and then fill in the form.

.To use the Repast S GA wrapper in the Java or Groovy simply follow these steps:

* Add an agent class field of type RepastGA and create an instance following 
this template:

----
new RepastGA(this, "evaluate", populationSize, 
	new Gene[]{ new IntegerGene(min1, max1) new DoubleGene(min2, max2)})
----

"evaluate" is the name of the fitness function that needs to be created as 
described in step two. "populationSize" is the count of the members in the GA 
population. The "Gene" array gives the set of genes, either "IntegerGene" or 
"DoubleGene," to be used. The parameters to the constructors (e.g., "min1" and 
"max1") are the optional lower and upper bounds for that gene.

* Add a class method behavior that takes a double precision array (i.e., 
"double[]"), returns an positive integer result, and that uses the fitness 
function name given above (e.g., "evaluate"). The double array is the current 
population member to be evaluated. The genes are in the same order as the 
template given in step one. Higher fitness result values mean greater fitness 
levels. The exact range does not matter as long as the numbers are positive. For 
higher performance, advanced users can implement org.jgap.FitnessFunction in 
place of just the creating the simple "int evaluate(double[])" method.

* Use the following method template to get a solution:

----
double[] solution = model.getBestSolution(cycles)
----

"cycles" is the number of evolutionary steps to use to compute the requested 
solution. The returned double array is the current best solution. The genes are 
in the same order as the template given in step one.

* If the population needs to be reset, use the following method template:
----
model.reset()
----

Neural Networks
~~~~~~~~~~~~~~~

Repast Simphony (Repast S) uses the Java Object Oriented Neural Engine (Joone)
(http://www.jooneworld.com/) library to implement neural networks. Joone can be 
used directly within agents or the Repast S neural network wrapper can be used. 
Directly using Joone provides maximum flexibility but requires more complex 
programming. The Repast S wrapper simplifies the use of Joone while preserving 
most options. It is recommended that Repast S users start with the Repast S 
wrapper and, only if needed, eventually move to directly use of Joone. The 
Repast S wrapper is consistent with direct use of Joone so this should 
relatively straightforward. Obviously, as with all machine learning tools, it is 
important to make sure that neural networks, in general, and the chosen network 
design, in particular, are appropriate for your application.

TIP: Documentation on how to use Joone directly can be found on their web site, 
http://www.jooneworld.com/

.To use the Repast S neural network wrapper in the visual editor simply follow 
these steps:

* Add a property of type "Linear Neural Network," "Logistic Neural Network," or 
"Softmax Neural Network" to an agent to produce the corresponding type of neural 
network. Replace the integer (i.e., int) array elements with a description of 
the layers for your application. The first number in the array is the count of 
input neurons, the last number is the count of output neurons, and the 
intermediate numbers are the interstitial layers. You can have as many 
interstitial layers as you would like (i.e., zero or more).

* Using the Wizard dialog, chose "Advanced Adaptation," "Use a Neural Network," 
"Train a Neural Network Model," and then fill in the form to store data for 
fitting. The input data array is indexed by the number of training examples and 
the number of input neurons. The output data array is indexed by the number of 
training examples and the number of output neurons.

* Using the Wizard dialog, chose "Advanced Adaptation," "Use a Neural Network," 
"Forecast from a Neural Network," and then fill in the form to get a forecast. 
The input data array is indexed by the number of input neurons. The output data 
array is indexed by the number of output neurons. To use the Repast S regression 
wrapper in the Java or Groovy simply follow these steps:

* Add an agent class field of type NeuralNet and create an linear, logistic, or 
softmax instance as follows:
----
JooneTools.create_standard(new int[]{inputNeurons intermediateLayer1 intermediateLayer2
intermediateLayerN outputNeurons}, JooneTools.LINEAR)).

JooneTools.create_standard(new int[]{inputNeurons intermediateLayer1 intermediateLayer2
intermediateLayerN outputNeurons}, JooneTools.LOGISTIC)).

JooneTools.create_standard(new int[]{inputNeurons intermediateLayer1 intermediateLayer2
intermediateLayerN outputNeurons}, JooneTools. SOFTMAX)).
----

* Use the following method to store data for fitting where "model" is the new 
field name: 

----
JooneTools.train(model, inputDataArray, targetOutputDataArray, epochs, convergenceLimit, 0, null);
----

The input data array is indexed by the number of training examples and the 
number of input neurons. The output data array is indexed by the number of 
training examples and the number of output neurons. The model will be trained 
until "epochs" cycles are completed or the "convergenceLimit" of root mean square 
error is achieved, whichever comes first.

* Use the following method to get a forecast where "model" is the new field name:

----
double outputData[] = JooneTools.interrogate(model, inputData)
----

The input data array is indexed by the number of input neurons. The output data 
array is indexed by the number of output neurons.

Regression
~~~~~~~~~~
Repast Simphony (Repast S) uses the OpenForecast 
(http://openforecast.sourceforge.net/) library to implement regression. 
OpenForecast can be used directly within agents or the Repast S regression 
wrapper can be used. Directly using OpenForecast provides maximum flexibility 
but requires more complex programming. The Repast S regression wrapper 
simplifies the use of OpenForecast while preserving most options. It is 
recommended that Repast S users start with the Repast S wrapper and, only if 
needed, eventually move to directly use of OpenForecast. The Repast S regression 
wrapper is consistent with direct use of OpenForecast so this should relatively 
straightforward. Obviously, as with all statistical tools, it is important to 
make sure that regression, in general, and the chosen regression fit, in 
particular, are appropriate for your application. The method "getForecastType()" 
can be used to find a text description of the selected equation for both types 
of regression. It is recommended that this be checked for appropriateness.

TIP: Documentation on how to use OpenForecast directly can be found on their web 
site, http://openforecast.sourceforge.net/

.To use the Repast S regression wrapper in the visual editor simply follow these 
steps:

* Add a property of type "Multilinear Regression Model" or "Best Fit Regression Model" to an agent
"Multilinear Regression Model" always fits input data sets using a linear equation for one input variable or
multilinear equation for multiple input variables. "Best Fit Regression Model" causes OpenForecast to
consider a range of different equation families and then find the best fitting member of the best fitting
equation family. This includes linear and multilinear equations as well as other families as defined in the
OpenForecast documentation.

* Using the Wizard dialog, chose "Advanced Adaptation," "Use a Regression Model," "Store Data for a
Regression Model," and then fill in the form to store data for fitting.

* Using the Wizard dialog, chose "Advanced Adaptation," "Use a Regression Model," "Forecast from a
Regression Model," and then fill in the form to get a forecast. Please note that it generally is necessary to
return default forecasts for several steps before enough example data is available for a good quality
forecast.

.To use the Repast S regression wrapper in the Java or Groovy simply follow these steps:

* Add an agent class field of type RepastRegressionModel and create an instance (i.e., new
RepastRegressionModel(false)). Set the constructor parameter to "false" for "Multilinear Regression
Model" or "true" for "Best Fit Regression Model." "Multilinear Regression Model" always fits input data sets
using a linear equation for one input variable or multilinear equation for multiple input variables. "Best Fit
Regression Model" causes OpenForecast to consider a range of different equation families and then find
the best fitting member of the best fitting equation family. This includes linear and multilinear equations
as well as other families as defined in the OpenForecast documentation. Obviously, as with all statistical
tools, it is important to make sure that the chosen functions, both multilinear and best fit, are appropriate
for your application. The method "getForecastType()" can be used to find a text description of the
selected equation for both types of regression. It is recommended that this be checked for
appropriateness.

* Use the new field's "add(...) method to store data for fitting (i.e., model.add(y, x1, x2, x3)).

* Use the new field's "forecast(...)" method to get a forecast (i.e., double x = model.forecast(y1, y2,
y3)). Please note that it generally is necessary to return default forecasts for several steps before enough
example data is available for a good quality forecast.
