[[runtime_gui_datasets]]
=== Data Sets
Repast Simphony records data from data sources of two types - Aggregate and 
Non-Aggregate.  Aggregate data sources receive a collection of objects (agents, 
for example) and typically return an aggregate value derived from the set of 
all of the objects. For example, an aggregate data source might call a method on 
each object and return the maximum value or mean of all values. A non-aggregate 
data source takes a single object (e.g. a single agent) and returns a single 
value for each object. For example, a non-aggregate data source might call a 
method on an agent and return the result of that method call. Data sources are 
grouped into named data sets. A data set is a collection of data sources. 

Once a data set is defined, the Repast runtime will record the data produced by 
the data set's data sources. However, the recorded data will not be written to a 
file or displayed in a chart. For that to occur, a <<runtime_gui_textsinks, 
Text Sink>> must be defined. A text sink takes the data produced by data sources 
and writes them to a file or the console. Similarly, a <<runtime_gui_charts, Chart>>
may be used to display the data set content in a time series or histogram.
A single data set can be connected to multiple text sinks and charts.

==== Creating a Data Set
Data collection is set up in Repast Simphony by defining the data sets and data 
sources described above. To create a data set, right click on the Data Sets node 
in the <<runtime_gui_scenario_tree, scenario tree>> and select *Add Data Set.*  
The <<runtime_gui_add_dataset, Data Set Editor dialog>> will appear in which 
the name the data set can be specified, along with the data set type. Data sets 
are able to record <<runtme_gui_aggregate_data, aggregate>> and 
<<runtme_gui_nonaggregate_data, non-aggregate data sources>>. 

[[runtime_gui_add_dataset]]
.Repast runtime add new Data Set dialog.
image::figures/runtime_gui_add_dataset.png[]

===== Standard Data Sources
In the next step (click *Next*), the data sources from which data will be recorded 
are defined. In the data source step there are three different tabs in which data
sources are selected and defined.

The first tab <<runtime_gui_add_dataset_std, *Standard Sources*>> is common to 
aggregate and non-aggregate sources, and includes the model *Tick Count*, 
*Random Seed*, and *Run Number*.  Selecting these sources will automatically insert 
the current value of these variables into the data set. The tick count value is 
selected by default and is almost always needed to record the timing of events, 
say to create a time-series chart, and in general simply to understand how the 
model progresses over time. The random seed parameter is useful to include in 
models with stochastic behavior so that specific results can be re-created by 
using the same random seed in additional model runs.  Finally, the run number is 
useful to include in logged data when more than one model run will be executed, 
say in batch mode, so that each of the run data are indexed in the data set.

The remaining two tabs include *Method Data Sources* and *Custom Data Sources*, and 
define which data is logged from the model components, and function differently 
depending on the data set type (aggregate or non-) and are described below.

[[runtime_gui_add_dataset_std]]
.Repast runtime add new Data Set dialog standard sources.
image::figures/runtime_gui_add_dataset_std.png[]

[[runtme_gui_aggregate_data]]
===== Aggregate Data Sources
For an aggregate data set, the *Method Data Sources* tab allows one to define data 
sources that call a method on each of the agents of a specified type 
and then perform an aggregate operation on the results of those method calls. For 
example, if a model contains "Human" agents, each of which have a getEnergy() 
method that returns the agent's energy as a double value, an aggregate data 
source can record the mean, maximum, and minimum energy for the population of 
Human agents. 

[TIP]
Use an aggregate data source to perform statistical summaries of agent properties.

To add an aggregate Method Data Source, click the *Add* button. A new row in the 
method data source table will be added. The type of agent for which to record 
data can be selected by double clicking on the cell in the *Agent Type* column. When
multiple agent types are available in the model, double clicking will display a 
list of agents from which to chose.  Next, the method for the selected agent type
is set by clicking on the cell in the *Method* column and selecting the available
agent methods for the data source row.  Since aggregate data sources perform a 
data operation on all of the agents for the specified type, the operation needs
to be selected in the *Aggregate Operation* column.  Double clicking on the cell
in this column provides a list of available data operations such as min, max, mean,
standard deviation, and others.  Finally, the data source should be provided with
a unique name that can be typed into the cell in the *Source Name* column.

An <<runtime_gui_add_dataset_agg_1, example aggregate data set source>> is shown
below in which the average energy for the "Human" agent type is aggregated into
a mean value.

Note that boolean operations can be summed, averaged, and so forth. True is equal 
to 1 and false is equal to 0. You will also need to provide a name for the data 
source by double clicking and typing a name in the cell in the Source Name column. 

After all of the desired data sources are defined, the data set update behavior
needs to be defined via the <<runtime_gui_schedule_dataset, *Schedule Parameters*>>.

[NOTE]
The example *Data Set* dialogs in this section display content from the *JZombies*
demo.  The actual content of the dialogs will vary by model data set content.

[[runtime_gui_add_dataset_agg_1]]
.Selecting data sources for an aggregate data set.
image::figures/runtime_gui_add_dataset_agg_1.png[]
 
[TIP]
If no methods are listed for the agent type in the data source, this means that
the agent class does not have publicly visible methods.  Make sure that the agent
has methods that return numeric data types and have public visibility.

An additional aggregate *Count* operation is available that will return the 
current number of agents of the specified type in the simulation. The Count 
operation does not require an agent method return value, but rather it simply
sums up all instances of the agent type, and is thus useful for calculating 
population size during a model run. <<runtime_gui_add_dataset_agg_2, 
A Count data source is created by clicking>>
the Add button in the *Method Data Sources* tab and selecting Count in the 
Aggregate Operation column. By selecting the Count operation the Method column 
cell with be set to a "N/A" (non-applicable) value indicating that the Count 
operation doesn't require a method call.  The Count operation will apply to the 
class specified in the Agent Type column.  A unique name for the Count source 
should be provided in the Source Name column.

[[runtime_gui_add_dataset_agg_2]]
.Creating a Count data source for an aggregate data set.
image::figures/runtime_gui_add_dataset_agg_2.png[]

The *Custom Data Sources* tab allows you to specify custom data sources that are
provided via a user-defined data source class that implements the 
repast.simphon.data2.AggregateDataSource interface. Type the name 
of the implementing class into the text box next to the Add button, then 
click the Add button. The new data source should appear in the list below 
the text box. 

// TODO Need more info on implementing custom sources

[[runtme_gui_nonaggregate_data]]
===== Non-Aggregate Data Sources
For an non-aggregate data set, the *Method Data Sources* tab allows one to define data 
sources that call a method on each of the agents of a specified type and returns 
a *separate result for each agent instance* of that type. Unlike the aggregate 
data source, an aggregate operation is not performed. For example, if a model 
contains "Human" agents, each of which have a getEnergy() method that returns 
the agent's energy as a double value, a non-aggregate data source will record the
individual energy value for each agent as a separate entry in the data set.  
Non-aggregate data sources are therefore useful for tracking the individual agent
properties during a simulation.

[TIP]
Use a non-aggregate data source to record the individual property values of each 
agent during a simulation.

To define a non-aggregate Method Data Source, select the source class in the 
*Source Class* combo box and then click *Add* to add a new row to the method data 
source table.

Next, the method for the selected agent type is set by clicking on the cell in 
the *Method* column and selecting the available agent methods for the data source 
row. Finally, the data source should be provided with a unique name that can be 
typed into the cell in the *Source Name* column. Note that only a single source 
class can be used, that is, all the method data sources need to be method calls 
on that selected class. 

An <<runtime_gui_add_dataset_nonagg, example non-aggregate data set source>> is shown
below in which the energy for all individual "Human" agents type is logged as
discrete values.

After all of the desired data sources are defined, the data set update behavior
needs to be defined via the <<runtime_gui_schedule_dataset, *Schedule Parameters*>>.

[[runtime_gui_add_dataset_nonagg]]
.Creating a Count data source for an aggregate data set.
image::figures/runtime_gui_add_dataset_nonagg.png[]

The *Custom Data Sources* tab allows you to specify custom data sources that are
provided via a user-defined data source class that implements the 
repast.simphon.data2.NonAggregateDataSource interface. Type the name 
of the implementing class into the text box next to the Add button, then 
click the Add button. The new data source should appear in the list below 
the text box. 

[[runtime_gui_schedule_dataset]]
===== Scheduling Data Sets
After data sources are defined, clicking the *Next* button displays the 
<<runtime_gui_schedule_params, Schedule Parameters dialog>> in which to specify 
the start time, priority, frequency, and interval (assuming a repeating frequency).
These parameters are as follows:

[[runtime_gui_schedule_params]]
.Specifying schedule parameters for a data set.
image::figures/runtime_gui_schedule_params.png[]

* *Start Time:* a double precision value that specifies the tick count at which
to begin data collection, as defined in the data set's data sources.

* *Priority:* a value of either *Random*, *First*, or *Last* that determines when the 
data collection occurs in a single simulation tick, relative to all other scheduled
simulation behaviors.  Typically this value is *Last* which indicates that all
scheduled agent behaviors will execute in a single time step before the data is collected.

* *Frequency:* a value of either *Repeat* or *One Time* that determines if the data
collection should occur on a regular repeating interval, or just a single time.

* *Interval:* a double precision value that specifies the interval frequency at which
to collect the data.

* *Also At End:* check this box to perform an additional data collection when the
simulation ends.

* *Only A End:* check this box to only record data at the end of the simulation.

Clicking *Finish* will create the data set for the current scenario. To actually
save the data set parameters in the scenario, select *File -> Save* in the GUI.   

[TIP]
Don't forget to save the scenario after adding new data sets.

