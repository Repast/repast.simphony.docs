Developer Topics
----------------

Creating a Dynamic Wizard
~~~~~~~~~~~~~~~~~~~~~~~~~
I've made a wizard framework that dynamically loads its options based on 
"options" specified in plugin.xmls. I've used it in enough places that I've gone 
ahead and generalized it. If you wish to use this setup I made it fairly 
straightforward. The classes used in this are in the repast.simphony.plugin.util 
plugin and in the repast.simphony.plugin.wizard package. These classes are 
WizardOption and WizardPluginUtil, DynamicWizard, and some related to the 
wizard's model (DynamicWizardModel, WizardModelFactory).

.WizardOption
WizardOption represents an option that will be taken in a wizard. It contains a SimplePath (the GUI steps
the wizard will take) and some description methods (for grabbing the title and description of the option).
Generally someone will subclass/subinterface this interface with their own type (say MyWizardOption) and
add any extra methods to it.
Implementations of WizardOption (or MyWizardOption) would generally specify their description (to be in
tooltips or a description field in the wizard option selection) and a title (for the option's title in a "Choose
type" list), and then fill in the other methods as needed.
The implementation would also build the steps it needs (say select file name or select agent class steps)
in getWizardPath and return them.

.WizardPluginUtil
The only method in WizardPluginUtil is the only one needed to dynamically load up the wizard options.
This takes in the plugin id, the extension point id where wizard options would be registered, the specific
WizardOption class the options should be an instance of, a PluginManager that the extension points would
be grabbed from, and finally a boolean parameter that specifies whether or not to register the options
with the DynamicWizard (this is important for using the DynamicWizard, and generally should be true).
This assumes the extension point will have a class field specified in it, so it could look like so:

----
<extension-point id="repast.simphony.data.mappingwizard.options">
	<parameter-def id="class"/>
</extension-point>
----

Or alternatively, you can just create a new extension point inherting its properties off the default one:

----
<extension-point id="wizard.options" parent-plugin-id="repast.simphony.plugin.util"
	parent-point-id="wizard.options">
</extension-point>
----

And extensions would then look like (assuming the plugin id is repast.simphony.data)

----
<extension plugin-id="repast.simphony.data" 
	point-id="repast.simphony.data.mappingwizard.options" id="data.bsf.basicoption">
	<parameter id="class" value="repast.data.bsf.gui.BasicScriptOption"/>
</extension>
----

.Loading the options
To load these options you have to call the WizardPluginUtil method from some point where you have
access to the PluginManager. For now the best way to do this is from a menu or other item action
creator. Hopefully at some point a more generic method will exist. You then can store the loaded options
somewhere so that you can have direct access to them if you desire. So for instance this could look like

----
public void init(PluginManager manager) {
	// grab all the available wizard options
	List<DataLoaderWizardOption> options = WizardPluginUtil.loadWizardOptions(manager,
		DataLoaderWizardOption.class, PACKAGE_ID, WIZARD_OPTIONS_ID, true);
	
	// store them for later
	staticOptions = options;
}
----

.Creating the wizard
Finally, to actually display a wizard that uses these options you use DynamicWizard. There are a lot of
arguments in the DynamicWizard as of now, so it is best to wrap the creation of the wizards in some
other static method. So an example method could look like:

----
public static DynamicWizard create(Scenario scenario, Object contextID) {
	return new DynamicWizard(WIZARD_OPTIONS_ID, scenario, contextID, "Select Data Source
		Type", "Choose a type for your data source.", new WizardFinishStep(),
		new WizardModelFactory() {
			public DynamicWizardModel create(BranchingPath path, Scenario scenario, Object contextID) {
				return new ChartWizardModel(path, scenario, contextID);
			}
		}
	);
}
----

This will create a wizard that has its options stored with the key WIZARD_OPTIONS_ID, scenario and
contextID (just general properties), the specified title for the wizard's select an option step, and specified
prompt for that same step, a final "wizard has completed" step, and a factory for generating the model
used by the wizard (in this case a ChartWizardModel).

Each of these properties plays their own role in the wizard process. Explicitly, the important ones and
their function (from this example):

* the wizard id (WIZARD_OPTIONS_ID) - a String that is the extension point id that the wizard
options would have been registered under. This in general is just the wizard's ID, meaning, the id
the wizard options would have been registered to WizardPluginUtil's methods, but if you set the
register flag to true when using loadWizardOptions, it will store the options with the extension point
id as the wizard id.

* the wizard model factory - This should build the wizard model that the wizard will pass along to each
of the steps. In general this model should be where each step stores their final information. So if
one step is in charge of specifying the directory some action will point to, it should when its done (in
its applyState method) set this directory on the model. The model itself can be grabbed during the
step's init(WizardModel) call, which occurs when the step is displayed. This model is important so
that when the wizard has completed you can load the settings that were specified in the wizard
steps (as needed).


Enabling FreezeDrying of Custom Projections
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
When building a new Projection, some things should be done if it is to be integrated into the whole
system. In particular, if it is to be freeze dryable, some special considerations may need to be made.
Since the freeze dryer generally just writes out all the fields of an object, this may or may not function
properly for a given Projection.
For a projection to be properly freeze dryed one of the following has to happen:

* The Projection and all the objects it contains should have a default constructor, or all of its
constructors should be able to support taking in dummy (or null) values. In general, this means the
Projection should be able to be written out and read in with the default freeze dryer
(DefaultFreezeDryer).

* A custom FreezeDryer should be written that will handle the given projection class. This freeze dryer
should be able to read and write the default implementation of your projection, and if reasonable,
other implementations.

* A ProjectionDryer should be created. This is not a FreezeDryer, but is an interface used by the
Context FreezeDryer. Building one of these is discussed below.

.Building a ProjectionDryer
All a ProjectionDryer does is store the settings from a custom Projection into a map, and later rebuild a
projection from a map (with the same settings). Implementations store properties in the addProperties
method, rebuild the projection in instantiate, and restore properties in the loadProperties methods.

.addProperties
The addProperties method should add implementation specific properties to the passed in Map. For
instance, in a Network these properties could be a list of edges in the network. This would be something
of the form "edges"->((node1, node2, edgeWeight), (node2, node3, 1.2), ...)). So it would be
implemented by:

----
protected void addProperties(Context context, MyNetwork net, Map<String, Object> properties) {
	super.addProperties(context, net, properties);
	ArrayList list = new ArrayList();
	for (Edge edge : net.getEdges()) {
		list.add(new Object[] { edge.getSource(), edge.getTarget(), edge.getWeight()});
	}
	properties.put("edges", list);
}
----

The super call lets the class's superclass (assuming it is not ProjectionDryer) add any neccessary
properties. It then builds a list of the edges, storing the properties in an array. Finally it stores to the
properties map the list of edges.

.instantiate and loadProperties
At some later point the context will be rehydrated and the projection will need to be rehydrated. First the
projection will need to be instantiated, and accordingly, the instantiate method would be called. For our
MyNetwork class this may be something like this:

----
protected T instantiate(Context<?> context, Map<String, Object> properties) {
	String name = (String) properties.get(NAME_KEY);
	return new MyNetwork(name);
}
----

This simply fetches the projection's name (which will be stored in ProjectionDryer's loadProperties method
- another reason why it's important to call the super's method!) and then creates the network with that
name. Next the network's properties need to be loaded, which, according to our addProperties method
will be like so:

----
protected void loadProperties(Context<?> context, MyNetwork net, Map<String, Object>
properties) {
super.loadProperties(context, proj, properties);
ArrayList<Object[]> edges = (ArrayList<Object[]>) properties.get("edges");
for (Object[] edgeProperties : edges) {
net.addEdge(edgeProperties[0], edgeProperties[1], (Double) edgeProperties[2]);
}
}
----

In this method we first are calling the super's load properties method (so that things like listeners and
any other settings will be loaded), then we fetch the edge information from the properties map (the
ArrayList... = line), and finally we add the edges into the given network. Note that we may have to cast
the properties if the network requires specific types in its methods (for instance if the weight is a Double
or double as in this example). Now the Projection will be added into the context and the rehydration process will continue on.

.Registering the new dryer
The different kind of dryers need to be registered in different kinds of ways. If you create a custom
FreezeDryer, you must register that dryer to any FreezeDryer instance you create. If you have created a
custom ProjectionDryer, you must register it to the ProjectionDryer class by calling its addProjectionDryer
method.