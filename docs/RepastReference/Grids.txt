== Grid Projections
Grids are a mainstay of agent based simulation. Many of the earliest simulations such as Schelling's
Dynamic Models of Segregation, Heatbugs, and Sugarscape were originally built on grids. 
Grids are a 1 or more dimensional data structure that is divided up into a number of cells.
These cells can be referenced by their integer coordinates. In other words, a grid is an n-dimensional
matrix. Even though grids have been used in agent based simulation since it's inception,
they still have value today. These data structures are very efficient and provide a number of different
ways to define neighborhoods. While grids don't offer the flexibility of an abstract network or the realism
of a continuous or GIS space, the grid can be used to simulate spaces and to create highly structured
relationships between agents. While some think of grids to represent space, there is no reason
why a grid couldn't be used define more abstract kinds of relationships. No matter how you look at it,
grids are still a powerful tool in an overall agent based toolkit.

.Repast Simphony's Grid support
Repast Simphony provides a rich set of tools to work with grids of all kinds. Specifically, it supports
* 2D, 3D and ND grids,
* querying for Von Neumann and Moore neighborhoods,
* Toroidal, Reflective and Fixed Border conditions.

=== Creating A Grid
Creating a grid in Repast Simphony is similar to creating the other projections. 
Your agents must exist in the context in order to exist in the grid, and you want 
to create the grid using a factory to make sure that it is initialized properly.

[source,java]
----
GridFactory factory = GridFactoryFinder.createGridFactory(new HashMap());
Grid grid = factory.createGrid("My Grid", context, gridBuilderParameters);
----

Pass the method a name (so that you can look up your grid later) and the context 
that will back the grid. But what is that last argument? The gridBuilderParameters. 
GridBuilderParameters are used to specify the properties of the grid itself, such
as its dimensions, its border behavior, and how agents are initially added to the grid.

.GridBuilderParameters
The GridBuilderParameters class contains a variety of static methods for creating specific types of
GridBuilderParameters. For example,

[source,java]
----
GridBuilderParameters params = GridBuilderParameters.singleOccupancy2DTorus(
		new SimpleAdder<Agent>(), 10, 10);
----

will create parameters for a 10x10 torus where each cell can only have a single occupant. Other static
methods (see the javadocs) allow you to create other types of grids. In general though, youwill always
have to specify a GridAdder and perhaps a GridPointTranslator when creating GridBuilderParameters. You
will also have to specify the dimensions. These will be the last arguments to the method.

=== GridAdder
An object doesn't exist in the projection until it is added to the context, and once it
is added to the context, it is automatically added to the projection. But where do we put it in the grid?
That's where the GridAdder interface comes in. The adder allows you to specify where to place an object
once it has been added to the context. It has a simple method:

[source,java]
----
public void add(Grid destination, U object);
----

In this case, the destination is the type of projection to
which we are adding our object (a grid). Object is the object we want to add to that projection. So, <U>
is whatever we're adding. Basically, to implement this interface, you just take in an object and do
something with it in the supplied projection. Ok, let's get a bit more concrete. Let's say that we have a
Grid and when an object is added to the grid, we want to locate it randomly. Here is the implementation
for that:

[source,java]
----
public void add(Grid<T> space, T obj) {
  Dimensions dims = space.getDimensions();
  int[] location = new int[dims.size()];
  findLocation(location, dims);
  while (!space.moveTo(obj, location)) {
    findLocation(location, dims);
  }
}

private void findLocation(int[]location, Dimensions dims) {
  for (int i = 0; i < location.length; i++) {
    location[i] = RandomHelper.getDefault().nextIntFromTo(0, dims.getDimension(i) -1);
  }
}
----

The add method randomly generates locations and puts the objects into that location (assuming the grid
allows the object to be there). This little bit of code sets up a random space for you as you add agents.
Not surprisingly, this is the code for the RandomGridAdder which comes with Repast Simphony. This
behaviour may not be what you want. The most basic Adder we provide is the SimpleAdder; This Adder
doesn't actually locate the object anywhere in the grid. It just allows the object to be used in the grid.
The object won't appear to have a location until you call

[source,java]
----
grid.moveTo(object, x, y);
----

This is a very useful adder because you don't have to know where the agent is supposed to be located in
advance. Let's look at one example of writing your own Adder. In this case, let's assume that our agents have
their grid coordinates stored. The adder just needs to use those coordinates to locate the agents
properly. We'll call the Interface Located:

[source,java]
----
public interface Located{
  public int getX();
  public int getY();
}
----

Let's write an adder that knows how to work with this:

[source,java]
----
public class LocatedAdder<Located> implements GridAdder<Located> {
  public void add(Grid<Located> grid, Located object){
    grid.moveTo(object, object.getX(), object.getY());
  }
}
----

This will add the object to the grid at the location specified by the agent itself. This doesn't handle any
errors or anything, but it should give you an idea of how to create your own adder.

=== GridPointTranslators
A GridPointTranslator determines the _border behavior_ of a grid. The border behavior is what happens
when an agents moves past the border of a grid. Five kinds of border behavior classes are described
below together with a description of how the behave in response to a Grid's moveTo and moveBy (the
moveBy methods are moveByDisplacement and moveByVector) methods.

* *StrictBorders* defines a strict boundary that cannot be crossed without throwing a
SpatialException. Consequently, any moveTo or moveBy across the border will throw an exception.

* *StickyBorders* defines a "sticky" border that to which an agent will "stick" in a moveBy. However,
a moveTo across the border will still throw a SpatialException.

* *InfiniteBorders* defines infinite borders that the agent will never cross.

* *BouncyBorders* defines a bouncy border that the agent will bounce off at the appropriate angle in
a moveBy. However, a moveTo across the border will still throw a SpatialException.

* *WrapAroundBorders* defines borders that wrap around to their opposite borders. This mean
moveTo and moveBy across the border will cross the border and enter the opposite side. A 2D grid
with WrapAroundBorders is a torus. In general then, moveTo will throw a SpatialException 
when crossing the border and moveBy will invoke the border behavior.

=== Moving on a Grid
Movement on the grid is accomplished with 3 methods.

[source,java]
----
moveTo(T object, int... newLocation)
----

This specifies the object to move and the new location to move to. It will return true if the move
succeeds, for example, if the location is unoccupied an single occupancy grid and the new location doesn't
violate any border behaviors. This method can be used to introduce objects into the grid if they do not yet have a grid location. This will throw a SpatialException if the object is not already in the space, if the
number of dimensions in the location does not agree with the number in the space, or if the object is
moved outside the grid dimensions.

[source,java]
----
GridPoint moveByDisplacement(T object, int... displacement)
----

Moves the specified object from its current location by the specifiedamount. For example,
moveByDisplacement(object, 3, -2, 1) will move the object by 3 along the x-axis, -2 along the y and 1
alongthe z. The displacement argument can be less than the number of dimensions in the space in which
case the remaining argument will beset to 0. For example, moveByDisplacement(object, 3) will move the
object 3 along the x-axis and 0 along the y and z axes, assuming a 3D grid. This will return the new
location as a GridPoint if the move was successful, otherwise it will return null. Like moveTo it will throw a
SpatialException if the object is not already in the space or if the number of dimensions in the
displacement is greater than the number of grid dimensions.

[source,java]
----
GridPoint moveByVector(T object, double distance, double... anglesInRadians)
----

Moves the specifed object the specified distance from its current position along the specified angle. For
example, moveByVector(object, 1, Direction.NORTH) will move the object 1 unit "north" up the y-axis,
assuming a 2D grid. Similarly, grid.moveByVector(object, 2, 0, Math.toRadians(90), 0) will rotate 90
egrees around the y-axis, thus moving the object 2 units along the z-axis. Note that the radians /
degrees are incremented in a anti-clockwise fashion, such that 0 degrees is "east", 90 degrees is "north",
180 is "west" and 270 is "south." This will return the new location as a GridPoint if the move was
successful, otherwise it will return null. Like moveTo it will throw a SpatialException if the object is not
already in the space or if the number of dimensions in the displacement is greater than the number of
grid dimensions.