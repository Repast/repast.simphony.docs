== Repast Model Design Fundamental Concepts
Repast Simphony has an architectural design based on central principles 
important to agent-based modeling. These principles combine findings from many 
years of ABMS toolkit development and from experience applying the ABMS toolkits 
to specific applications. There are a variety of design goals for Repast S 
including the following:

* There should be a strict separation between models, data storage, and 
visualization.
* Most toolkit functions should be available without having to implement 
interfaces, extend classes, or manage proxies.
* User model components should be ‘plain old Java objects’ (POJOs) that are 
accessible to and replaceable with external software (e.g., legacy models and 
enterprise information systems). 
* Common tasks should be automated when possible. 
* Imperative ‘boilerplate’ code should be eliminated or replaced with 
declarative runtime configuration settings when possible. 
* Idiomatic code expressions (i.e., repeatedly used blocks of code such as loops 
that scan lists of agents) should be simple and direct.

.Contexts and Projections
The Context is the core concept and object in Repast Simphony. It provides a 
data structure to organize your agents from both a modelling perspective as well 
as a software perspective. Fundamentally, a context is just a bucket full of 
agents, but they provide more richness.

The core data structure in Repast S is called a Context. The Context is a simple 
container based on set semantics. Any type of object can be put into a Context 
with the simple caveat that only one instance of any given object can be 
contained by the Context. From a modeling perspective, the Context represents an 
abstract population. The objects in a Context are the population of a model. For 
simplicity, we refer to these objects as proto-agents. However, the Context does 
not inherently provide any mechanism for interaction between proto-agents. One 
could say that a Context represents a "soup" where the agents have no concept of 
space or relation, but the Context is actually more of a proto-space. The Context 
provides the basic infrastructure to define a population and the interactions of 
that population without actually providing the implementations. As a proto-space, 
the Context holds proto-agents that have idealized behaviors, but the behaviors 
themselves cannot actually be realized until a structure is imposed on them.

Repast S Contexts can be hierarchically nested to form a tree of parent Contexts 
and their sub-Contexts. Contexts are containers for agents and projections. 
Agents can join or leave Contexts at any time and can simultaneously exist in 
multiple Contexts and sub-Contexts. Projections specify the relationship between 
the agents in a given context. Projections include:

* multidimensional discrete grids
* multidimensional continuous spaces
* networks
* geographical information systems (GIS) spaces.

Each Context can contain as many projections as needed for a given model. Each 
Projection in each Context defines a set of relationships between each the agent 
in that context. For example, a Three Dimensional Continuous Space Projection in 
a given Context defines the spatial relationship (i.e., Euclidean distance)
between each agent. A Network Projection containing social relationships in the 
same Context might define friendship relations between the agents. A second 
Network Projection in the given Context might define family relationships 
between the agents.

.Queries
Repast S provides a mechanism to query a model's Context hierarchy and the 
associated Projections and agents. This mechanism provides methods to find 
agents with specific types, agents with selected individual properties, and 
agents with given Projections properties (e.g., agents at a given location in a 
grid or agents with given kinds of links to other agents).

Queries are defined using the following conceptual predicates:

* *Equals*: This predicate determines whether the object is equal to a given 
object.
* *Property equals*: This predicate determines whether a property in the object 
is equal to a given value.
* *Property less than*: This predicate determines whether a property in the 
object is less than a given value.
* *Property greater than*: This predicate determines whether a property in the 
object is greater than a given value.
* *Network adjacent*: This predicate determines whether the object is linked to 
a given object in a specified network.
* *Network successor*: This predicate determines whether the object has an 
inbound edge from a given object in a specified network.
* *Network predecessor*: This predicate determines whether the object has an 
outbound edge to a given object in a specified network.
* *Touches*: This GIS predicate determines whether the object touches a given 
object in space.
* *Contained by*: This GIS predicate determines whether the object is contained 
by a given object in space.
* *In envelope*: This GIS predicate determines whether the object is within a 
given envelope (bounding box) in space.
* *And*: This predicate implements intersection.
* *Or*: This predicate implements union.
* *Not*: This predicate implements negation.
* *Von Neumann*: This predicate determines whether an object is within the Von 
Neumann neighborhood of a given object in a grid.
* *Moore*: This predicate determines whether an object is within the Moore 
Neighborhood of a given object in a grid.
* *Within distance*: This GIS and non-GIS predicate determines whether the 
object is within a given distance of a specified object in a GIS space, a 
non-GIS grid or continuous space, or within a given path length in a network.
Concrete subclasses implement specific functions for each projection type.

Searches that utilize these conceptual predicates can also be performed 
imperatively using Java syntax or declaratively using watcher syntax. Both of 
these approaches are discussed later in this section. Groovy uses the same 
syntax as Java for the predicates. When used in an imperative mode, queries 
normally return a list scanning object or Iterator. These iterators can be used 
in programmed agent behaviors to operate on and react to members of the list.

.Watches
The Repast S Watcher mechanism builds on the Context hierarchy and query system 
to provide behavioral triggers. Watchers allow modelers to easily:

* Define queries to find other agents to monitor
* Define properties of other agents to be monitored
* Define activation conditions of the monitored properties and other properties
* Specify the time for a response if the activation conditions are triggered
* Specify the behavior to invoke when the activation conditions are triggered

The Repast Watchers are efficiently implemented using dynamic code generation 
that instruments the monitored agents with the needed behavioral activation 
checks.

Repast Simphony's combination of Contexts, Projections, Queries, and Watchers 
provides a powerful and flexible environment for ABMS implementation.




=== Projections
While Contexts create a container to hold your agents, Projections impose a 
structure upon those agents. Simply using Contexts, one could never write a 
model that provided more than a simple "soup" for the agents. The only way to 
reference other agents would be randomly. Projections allow the modeller to 
create a structure that defines relationships, whether they be spatial, network, 
or something else. A projection os attached to a particular Context and applies 
to all of the agents in that Context. This raises an important point:

IMPORTANT: An object (agent) must exist in a Context before it can be used in a 
projection. 

Multiple projections can be addeded to the same context therefore it is possible, 
for example, for a context to contain a grid, a geography, and a network. 

Agents may reference projections through their containing context by specifying
the name of the projections, e.g. "mynetwork":

----
Context context = ContextUtils.getContext (this)
Projection projection = context.getProjection("mynetwork");
----

The returned Projection object will have limited value unless is is cast to the
specific type (e.g. Network or Grid):

----
Context context = ContextUtils.getContext (this)
Network network = (Network)context.getProjection("mynetwork");
----

==== Creating Projections
In general, projections are created using a factory mechanism in the following 
way.

1. Find the factory

2. Use the factory to create the projection

// TODO Use complete examples or merge with the following sections
// TODO Fill in the spacea attribute options and alloed values

----
GridFactory factory = GridFactoryFinder.createGridFactory(new HashMap());
Grid grid = factory.createGrid("Simple Grid", context, ...);
----
----
ContinuousSpaceFactory factory = ContinuousSpaceFactoryFinder.createContinuousSpaceFactory(new HashMap());
ContinuousSpace space = factory.createContinuousSpace("Simple Space", context, ...);
----

Each factory creates a projection of a specific type and requires the context 
that the projection is associated with and the projections name as well as 
additional arguments particular to the projection type. These additional 
arguments are marked above with "..." and are explicated on the individual pages 
for that projection.

