== Project Setup and Configuration
To begin the development of a Repast Simphony model in Java, ReLogo, Groovy, or 
Statecharts, a new project needs to be created, or an existing Java or Groovy project
can be configured to use Repast capabilities. 

Creating new Repast Simphony projects follows the standard Eclipse IDE new project
creation wizard, but with customized options for Repast projects.  Step-by-step
instructions for creating new Repast projects are provided below.  Please also
refer to the online https://help.eclipse.org[Eclipse Help pages] for more details. 

[[create-repast-project]]
=== Creating a New Repast Project
1. *Start Repast Simphony and open a new workspace*.  A blank workspace is set to the
ReLogo perspective as shown below.  Eclipse perspectives provide customized layouts
of the Eclipse window components depending on the type of activity the user is doing.
The ReLogo perspective provides a minimal view of development components.  For developing
Java-based Repast projects, switch to the Java perspective by clicking the Java
perspective button image:figures/eclipse_java_button.png[] in the upper right corner.
+
[[new_eclipse_workspace]]
.New Eclipse Workspace
image::figures/blank_workspace.png[width=750]

2. *Right click in the Package Explorer* panel located on the left side of the 
window, and select New -> Project... as shown below:
+
[[new_project]]
.New Eclipse Project
image::figures/new_project.png[width=750]

3. *The New Project wizard will appear* prompting to select the type of project to 
create.  Scroll down the list to the Repast Simphony category and select Repast
Simphony Project as shown below:
+
[[new_repast_project]]
.New Repast Simphony Project Selection
image::figures/new_repast_project.png[]

4. *The Repast Simphony Project dialog appears* and prompts for a project name.  Provide
the project name and optionally specify the project location.  By default, the project
will be saved in the workspace folder.  Click Finish to complete the new project
setup.
+
[[new_repast_project_dialog]]
.New Repast Project Dialog Example
image::figures/new_repast_project_dialog.png[] 

5. *The new Repast project wizard* will automatically create the project in the
workspace and add the Repast development libraries to the project.  A sample
completed new Repast project in the Eclipse workspace is shown below.  The project
folder named "MyProject" in the example workspace contains a list of folders and
files that are described in the section <<project-contents,Project Contents>>.
+
[[new_repast_project_workspace]]
.New Repast Project in the Workspace
image::figures/new_repast_project_workspace.png[width=750]


[[create-relogo-project]]
=== Creating a New ReLogo Project
ReLogo project creation is nearly identical to <<create-repast-project, creating
a Repast project>>.  The steps are outlined below.
  
1. *Start Repast Simphony and open a new workspace*.  A blank workspace is set to the
ReLogo perspective as shown below.  Eclipse perspectives provide customized layouts
of the Eclipse window components depending on the type of activity the user is doing.
The ReLogo perspective provides a minimal view of development components.  Different
Eclipse perspectives can be switched to, however it is recommended to continue
using the ReLogo perspective with ReLogo projects.
+
[[new_eclipse_workspace_relogo]]
.New Eclipse Workspace
image::figures/blank_workspace.png[width=750]

2. *Right click in the Package Explorer* panel located on the left side of the 
window, and select New -> Project... as shown below:
+
[[new_project_relogo]]
.New Eclipse Project
image::figures/new_project.png[width=750]

3. *The New Project wizard will appear* prompting to select the type of project to 
create.  Scroll down the list to the ReLogo category and select ReLogo Project 
as shown below:
+
[[new_relogo_project]]
.New ReLogo Project Selection
image::figures/new_relogo_project.png[]

4. *The ReLogo Project dialog appears* and prompts for a project name.  Provide
the project name and optionally specify the package name.  By default, the project
will be saved in the workspace folder.  Click Finish to complete the new project
setup.
+
[[new_relogo_project_dialog]]
.New ReLogo Project Dialog Example
image::figures/new_relogo_project_dialog.png[] 

5. *The new ReLogo project wizard* will automatically create the project in the
workspace and add the Repast development libraries to the project.  A sample
completed new ReLogo project in the Eclipse workspace is shown below.  The project
folder named "MyRelogoProject" in the example workspace contains a list of folders and
files that are described in the section <<project-contents,Project Contents>>.
+
[[new_relogo_project_workspace]]
.New ReLogo Project in the Workspace
image::figures/new_relogo_project_workspace.png[width=750]

[[update-repast-project]]
=== Updating an Existing Repast Project
Existing Repast projects starting with version 2.0 generally do not require any
special steps to update the project or model components.  Users may optionally
update the Repast model installer builder files that are located in the project's
/installer folder by using an automated update feature.  The Repast model installer
builder is a bundled utility that packages a Repast model into a self-contained
JAR installer that can be distributed to other systems even if they do not have
Repast installed on them.  Since some version-specific configuration details are 
contained in the project's installation folder, it it sometime necessary to update
these files after a new version of Repast is installed.  

* *To update the model installer builder configuration files and right click on the Repast
project, select Repast Simphony -> "Update model installer files".*  A dialog will
appear asking to confirm the name of the model.  Typically the correct name of the
model will be automatically filled in, however the user can change the name in case
the project name was changed at some point.  Click OK and the model installer files
will be updated.   Note that no project files outside of the /installer folder will
be modified.
+
[[update_project]]
.Updating an Existing Repast Simphony Project
image::figures/update_project.png[width=750]

=== Adding Repast to an Existing Project
An existing Java project can be configured such that Repast and ReLogo models
and components can be used.  This involves adding the *Repast Nature* to the Eclipse
project.  Adding the Repast Nature requires a single step:

1. *Right click on the project and select Repast Simphony -> Add 
Repast Simphony Nature*. This will add the Repast libraries to the 
project class path so that you can reference Repast classes and run simulations 
from your project without needing to manually add all of the Repast libraries 
and dependencies.
+
[[add_repast_nature]]
.Adding the Repast Nature to a Java Project
image::figures/project_add_repast_nature.png[width=750]

2. After the Repast Nature has been added, the existing project will be modified
to include the Groovy and Repast development libraries as shown in the following 
figure.   Note that the Repast configuration files have not been added to the 
project, as the Repast Nature only provides access to the libraries.  To fully
build a Repast model with the updated Java project, the <<project-contents, project
configuration files>> will need to be manually added.
+
[[project_repast_nature]]
.Workspace Showing the Repast Nature on a Java Project
image::figures/project_repast_nature.png[width=750]

[[importing-model]]
=== Importing a Model
Users who have existing Repast projects or who have received a Repast project from
someone else may import the project into a new version of Repast Simphony using
the following steps:

1. *Right click on the Package Explorer and select "Import..."*  The Eclipse 
import wizard dialog will appear prompting to select the type of Eclipse item to
import.  Open the "General" folder, select "Existing Projects into Workspace" 
and click Next as shown in the following figure. 
+
[[eclipse_import]]
.Eclipse Project Import Wizard Dialog
image::figures/import_project_1.png[]

2. *In the Eclipse project import dialog, browse and select the project folder to
open.*  If the selected folder contains a valid Eclipse project, the project will
be listed in the Projects box in the dialog as shown in the following figure.  In 
this example, the "Autocatalysis" project is selected.  By default the option "Copy
projects into workspace" is selected.  This will make a copy of the selected project
and place it in the workspace location and is useful when users would like to maintain
a backup of the original project, since workspace edits will not be made in the 
workspace project location instead of the original project location.
+
[[eclipse_import_select]]
.Eclipse Project Import Wizard Dialog Showing Selected Project.
image::figures/import_project_2.png[]


[[project-contents]]
=== Project Contents and Model Configuration Files
Repast and ReLogo projects contain a number of folders and files that are required
and contain essential model configuration data.  Repast Java project developers
typically modify these files to suit the model properties, however ReLogo project
developers typically will not need to modify any of these files.  

* *The following figure displays the project contents for a newly created Repast Java project.*  If
the project contents are not visible, it may be necessary to switch to the Java 
perspective by clicking the Java perspective button image:figures/eclipse_java_button.png[] 
in the upper right corner.
+
[[repast_project_contents]]
.Workspace Showing the full contents of aRepast Java Project
image::figures/repast_project_contents.png[width=750]

.Required Project Contents
The following list of folders contain essential Repast project configuration files
and should not be deleted or renamed:

* *src* is the source code folder that contains all of the project source code 
such as agent class files.

* *batch* folder contains batch run parameter XML file that is normally used
when running Repast models in batch mode. 

* *installer* folder contains configuration files used by the Repast model builder
installer that packages stand-alone distributable versions of the user's Repast model.

* *launchers* folder contains the Eclipse launch configuration files that are used
to run the Repast model.

* *MyProject.rs* folder contains the Repast model meta-data XML files that describe
specific details about the Repast model, like agent locations, types of displays,
charts, and logging information.  The prefix of this folder (before .rs) is depndend
on the project name.

After creating a new Repast project, the model meta-data XML files need to be updated
according to the types of components that a user would like to include in the model.
The only two files that need to be directly edited are the <<user-path, user_path.xml>>
and the <<context-xml, context.xml>> files.  All other project configuration files
are automatically updated by the Repast GUI, although they may be manually edited
as well.

[[user-path]]
==== user_path.xml
The user_path.xml file located in the MyProject.rs folder provides information to
the Repast runtime about where to look for agent files and other files or libraries
needed by the model.  The default user_path.xml file created by the Repast new
project wizard is shown below.  In many cases, the default user_path.xml file
does not need to be changed at all since the default configuration is the least
constrained in terms of what agents and libraries are made available to the Repast
runtime. 

[source,xml]
----
<model name="MyProject" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://repast.org/scenario/user_path">
  <classpath>
    <agents path="../bin" />
    <entry path="../lib" />
  </classpath>
</model>

----

TIP: In many cases, the default user_path.xml file does not need to be changed at all.

NOTE: The only unique entry in the default user_path.xml file is the model name attribute
which is the same as the project name.

The *path element* is a reference to a directory or jar file. If the directory contains 
jars then all those jars are added to the classpath. If the directory or its 
children contain .class files then the directory is added to the classpath. More 
than one path can be specified. Multiple paths should be comma-separated. For .class 
files, the path functions as a classpath and so it must be the directory 
immediately above the directories corresponding to the class packages. For 
example, given the class repast.simphony.MyClass and the directory structure 
X/bin/repast/simphony/MyClass.class, the path should be X/bin. This applies to 
path in both entry and agents elements.

.Agents path
As may be evident, the purpose of the user_path.xml file is to provide the locations
of the model agent classes to the Repast runtime.  The default user_path.xml sets
the *agents path* value to "../bin" which is the default location of compiled class
files in Java projects.  The bin folder is typically not visible in the Java perspective.
When the agents path is set to "../bin", it means that the Repast runtime will look
in the project bin folder which is the root folder for all compiled classes in the 
project.  In other words, *all* class files in the project will be made available 
to the Repast runtime as "Agents".  This special classification is used in the runtime
to scan agent classes for annotations, such as those used for scheduling, and all
agent classes will appear in the runtime wizards for creating displays or data 
collectors.  

For small projects, providing the entire set of project classes to the Repast 
agents path may be fine, however when projects become very large, it may be beneficial
to *filter* what types of classes the Repast runtime considers "agents".  The filter
can be specified in the agents path element as follows:

[source,xml]
----
<agents path="../bin" filter="myProject.somepackage.agents.*"/>
----

The filter value specifies which package contents are to be loaded as "agents"
by the Repast runtime.  In the above example, it is assumed that the package 
myProject.somepackage.agents exists, and that the agent classes are located in this
package.  Note that the wildcard character "*" is required to specify that all classes
in the package should be loaded as agents.

.Agents Element
[options="header",width="80%",cols="3"]
|====
|Attribute Name |Description |Required
|path |Path to agent classes folder |YES
|filter |Specifies a class filter on the agents path(s) |NO
|====

.Entry path
The entry path elements in the user_path.xml file provide other types of model classes
to the Repast runtime that aren't necessarily considered agents.  Classes like utility
functions, file loaders, etc that are used by agents, but are not agents themselves
could be provided to an entry path.  The default value of "..lib" configures the 
Repast runtime to scan this folder for model classes, and the user can place JAR
files in the lib folder for things like third party libraries used by the model.  When
a folder is specified as in the default user_path.xml, the entire contents of the
folder is made available to the Repast runtime.

By default, entry path values will not automatically be scanned for Java annotations
as with the agents path entry.  If an entry path refers to classes that do contain
Repast-specific annotations like @ScheduledMethod, then the annotations option 
should be specified as follows:

[source,xml]
----
<entry path="../somepath" annotations="true"/>
----

.Entry Element
[options="header",width="80%",cols="4"]
|====
|Attribute Name |Description |Allowed Values |Required
|path |Path to model classes folder |Any string |YES
|annotations |Specifies if path should be scanned for Repast-specific annotations |true or false (default is false) |NO
|====

.Builtin path
Finally, the builtin path element is for cases when a user needs to add an agent class 
existing in one of the Repast plugins. The user specifies the canonical class 
name as the fullname as follows:

[source,xml]
----
<builtin fullname="repast.simphony.someclass"/>
----

.Builtin Element
[options="header",width="80%",cols="3"]
|====
|Attribute Name |Description |Required
|fullname |Path to Repast agent classes |YES
|====

NOTE: For the builtins, since the class can be in any one of the repast plugins, 
without hard coding the path, it is difficult to use the filter mechanism on all 
the plugins. This means that unless we can figure out a way to figure out the 
path of a resource containing a package, we must specify each individual class 
that we'd like to be considered an agent class. The good news is that this is 
not a common usage.

[[context-xml]]
==== context.xml
The context.xml file located in the MyProject.rs folder provides information to 
the Repast runtime about model meta-data such as the types of projections and
context hierarchy.  The default context.xml file created by the Repast new project 
wizard is shown below. In almost all cases, the default context.xml file needs to 
be changed to include model specific details.

[source,xml]
----
<context id="MyProject" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://repast.org/scenario/context">
  	
</context>
----

TIP: In almost all cases, the default context.xml file needs to be changed to 
include model specific details.

As is apparent, the default context.xml is essentially empty, aside from the root
context element which specifies the name of the root context "MyProject" which by
default is the same as the project name.  The additional xmlns and xsi values
specify the XML descriptor information which provides content assistence in XML
editors like in Eclipse.

context.xml contains the context hierarchy information.

[source,xml]
----
<context id="..." class="...">
  <attribute id="..." value="..." type="[int|long|double|float|boolean|string|...]" 
    display_name="..." converter="..."/>
	
  <projection id="..." type="[network|grid|continuous space|geography|value layer]">
    <attribute id="..." .../>
  </projection>	
	
  <context id="..." class="...">
    ...
  </context>
</context>
----

.Context Element
[options="header",width="80%",cols="3"]
|====
|Attribute Name |Description |Required
|id |Unique identifier for the context |YES
|class |Fully qualified name of a Context implementation. If this
is present this context will be used instead of the default |NO
|====

.Attribute Element
[options="header",width="80%",cols="3"]
|====
|Attribute Name |Description |Required
|id |Unique identifier for the attribute |YES
|value |Default value of the attribute |YES
|type |The primitive or class type of the attribute |YES
|display_name |Optional name used to display the attribute when it is used as a 
model parameter |NO |converter |Optional implementation of StringConverter used 
to convert the attribute to and from a string representation |NO
|====

For example:

[source,xml]
----
<context id="MyContext">
  <attribute id="numAgents" value="20" type="int" display_name="Initial No. Agents"/>
</context>
----

.Projection Element
[options="header",width="80%",cols="3"]
|====
|Attribute Name |Description |Required
|id |Unique identifier for the projection |YES
|type |The projection type (network, grid, geography, continuous space, value layer) |YES
|====

.Special Attributes
If certain special attributes are present, then the context.xml file can be used 
to instantiate the actual context hierarchy. The attributes are defined in the repast.simphony.dataLoader.engine.AutoBuilderConstants.

.Context Attributes
[options="header",width="80%",cols="5"]
|====
|Attribute Id |Description |Allowed values |type |Required
|\_timeUnits_ |The tick unit type |Any string that can be parsed by Amount.valueOf |string |NO
|====

.Grid Attributes
[options="header",width="80%",cols="5"]
|====
|Attribute Id |Description |Allowed values |type |Required
|Any attribute of int type |Any int attributes
will be used as the dimensions of the
grid. These will be processed in order
such that the first becomes the width
(x) dimensions, the next the height
(y) and so on. |Any int |int |YES
|border rule |Specifies the behavior of agents
when moving over a grid's borders. |bouncy, sticky, strict, or periodic |string |YES
|allows multi |whether or not the grid allows multiple agents in
each cell |true or false (default is false) |boolean |NO
|====

For example:

[source,xml]
----
<context id="MyContext">
  <projection id="MyGrid" type="grid">
    <attribute id="width" type="int" value="200"/>
    <attribute id="height" type="int" value="100"/>
    <attribute id="border rule" type="string" value="periodic" />
    <attribute id="allows multi" type="boolean" value="true"/>
  </projection>
</context>
----

will create a 200 x 100 grid with an id of "MyGrid". The border rule for the grid 
is "periodic" so the grid will wrap, forming a torus. The grid will also allow 
multiple agents in each cell.

.Continuous Space Attributes
[options="header",width="80%",cols="5"]
|====
|Attribute Id |Description |Allowed values |type |Required
|Any attribute of int or double type | Any int or double
attributes will be used as the dimensions of the grid. These will be
processed in order such that the first becomes the width (x) dimensions,
the next the height (y) and so on. |Any int or double |int or double |YES
|border rule |Specifies the behavior of agents when moving over
a space's borders. |bouncy, sticky, strict, or periodic |string |YES
|====

For example:

[source,xml]
----
<context id="MyContext">
  <projection id="MySpace" type="continuous space">
    <attribute id="width" type="int" value="200"/>
    <attribute id="height" type="int" value="100"/>
    <attribute id="border rule" type="string" value="strict" />
  </projection>
</context>
-----

will create a 200 x 100 continuous space with an id of "MySpace". The border rule 
for the grid is "strict" so any movement across the border will cause an error.

.Network Attributes
[options="header",width="80%",cols="5"]
|====
|Attribute Id |Description |Allowed values |type |Required
|directed |Whether or not the network is directed |true or false. Default is false |boolean |NO
|edge class |The fully qualified name of a class that 
extends RepastEdge. Any edges created by the network will be
of this type. |Any properly formatted class name extending RepastEdge |string |NO
|====

For example:

[source,xml]
----
<context id="MyContext">
  <projection id="MyNetwork" type="network">
    <attribute id="directed" type="boolean" value="true"/>
  </projection>
</context>
----

will create a network with an id of "MyNetwork". The network will be directed 
and use the default RepastEdge as the edge type.

[[distribute-model]]
=== Distributing Your Model

Repast Simphony provides multiple ways to distribute executable models to others
without the need for them to separately download and configure Repast Simphony on
their computer.  

==== Building a Portable Model Archive
The first option creates a portable zip archive of the user's model and
packages it with the Repast runtime components required to execute the model.
This option is best for those who wish to provide a simple runnable version of their
model to others without the need for others to run executable installers on their
machines.  This is also useful when users are restricted from installing software, as the
portable model archive requires only unpacking the archive and running the model script,
along with a Java Runtime Environment (JRE) on the target machine.

NOTE: When distributing a model as a portable archive 
the archive does not include a JRE which must be separately installed on the target machine.

To build a portable model archive, select the launch configuration "Build portable 
archive for <user> model", where the <user> variable will reflect the name of the current
project.  You will be prompted to select a folder in which to save the model archive, which
will be written to model.zip.  The build process may take a minute or two depending 
on the number of files in the project.  

TIP: Advanced model developers may wish to customize the 
contents of the portable model archive which can be done by modifying the 
installer/create_model_archive.xml file that defines an https://ant.apache.org/[ant] 
build process for the archive.

The portable model archive can then be copied to another computer and contains all of the
components needed to run the Repast Simphony model.  Simply extract the model archive and
double click or run the included start_model.bat for Windows, or start_model.command for
Linux or macOS. Depending on your Linux distribution and settings, double clicking 
start_model.command may be enough to run the model, otherwise run it from the terminal.

==== Building a Model Installer Application
The second option for creating a distributable model requires the creation of an installer
application which is a Java-based model installer that resembles a typical step-based
software installer, allowing the user to accept a license agreement, select an installation
directory, and create desktop shortcuts.  Like the model archive builder described above, the
model installer application contains all of the components needed to run a Repast Simphony
model.

Repast Simphony provides an automated process to build a Java-based model installer using 
the http://izpack.org/[IzPack] packager which
is included with Repast Simphony.  This type of installer is appropriate for those who wish
to distribute a more formal software installer for their Repast Simphony models.  One
caveat is that the IzPack based model installer requires JRE 8 and may not compatible with
later versions of Java.  This restriction is only true for the installer itself as the Repast
Simphony runtime is compatible with JRE versions 8, 9, 11, and 16. A second caveat is that
the user of the target machine on which the model is to be installed must have the necessary
privileges to run a software installer application.

NOTE: Using the IzPack based model installer requires JRE 8 and may not compatible with
later versions of Java.

To build the model installer application, select "Build Installer ..." in the run menu.
You will be prompted to select a folder in which to save the model installer, which
will be written to setup.jar. The builder may take a few minutes to complete the installer. 
Once this process is complete, a message "BUILD SUCCESSFUL" should be visible in the Console 
window.  The setup.jar file is an executable Java jar file that when double clicked will launch
the model installer application on the target machine.

TIP: Advanced model developers may wish to customize the contents and the installer options of the
IzPack-based model installer application and can be done by modifying the 
installer/installation_coordinator.xml file that defines an https://ant.apache.org/[ant] build process for the installer.
The IzPack installer configuration information is contained in the installation_components.xml file
and defines the available steps in the installer applications, along with what options are available
when installing the model.  The IzPack installer configuration used by Repast Simphony models 
conforms to the IzPack 5.0 schema.  
See the https://izpack.atlassian.net/wiki/home[IzPack Wiki] for more details.

After the Repast Simphony model installer is run on the target machine, it will create a folder
containing the model files and the Repast Simphonhy components.  On Windows systems, their may be
shortcuts available to run the model if this option was selected during the installation process.
On macOS and Linux, the model can be executed using the start_model.command.