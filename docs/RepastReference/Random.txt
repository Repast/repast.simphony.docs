== Random Numbers

=== RandomRegistry
Like many of the other registries in Simphony, the RandomRegistry is available 
through the current RunState (through its getRandomRegistry() method). This 
interface provides the capability for storing named random distributions and 
retrieving them. It also can set and retrieve the seed that a stream will use 
(or is using) for streams it creates through its addStream(String, Class, ...) 
methods.

=== RandomHelper
The RandomRegistry by itself is somewhat difficult to work with, to simplify 
using it the RandomHelper class was created. This provides methods for creating 
the random streams that will be used, and for retrieving the streams after they 
have been created, when you do not have a reference to the current RunState.

Through its getStream, getUniform and getNormal methods, you can retrieve 
distributions from the current RandomRegistry. Through its numerous createXXX 
methods, you can create the distributions and store them to the current 
RandomRegistry.

The RandomHelper also handles creating and maintaining a default Uniform number 
stream. This stream is the one used by Repast when it needs a random number, and 
is no different then the other Uniform number streams, except that it will 
always exist when requested from the RandomHelper (when the simulation is 
running). If you wish to use a Uniform distribution for your random numbers, you 
can avoid some of the extra work that comes with the named streams (meaning, 
specifying the name of the stream, and possibly casting the stream) by simply 
using RandomHelpers' getDefault, nextInt, and nextDouble methods. You also can 
retrieve and/or set the seed for the default stream through the RandomHelper's 
getSeed and setSeed methods.

Generally there are going to be two types of usage of the random functionality. 
The first would be when you just need random numbers of some sort. In this case 
you would just want to use RandomHelper's default methods, meaning the 
getDefault(), nextInt and nextDouble methods.

The other case is when you want numbers from a non-Uniform distribution, or you 
want multiple random streams functioning at once. In this case you can use 
RandomHelper's default methods for any uniform numbers, but for producing 
multiple streams or a non-Uniform stream you have to use the methods that
take in a stream name. Each of these separate cases will be walked through next.

=== Single Stream Default Use
When working with the default Uniform stream there is really only one thing you 
may want to look at manipulating, the default stream's random seed. This is set 
through the RandomHelper's setSeed(int) method. Setting the random seed should 
generally happen when the model is setting up. There are two ways you can do 
this. One way is in a ControllerAction, but if you wish to use the random 
numbers in setting up the model you will not have your seed set ahead of time. 
The other (correct) way is in a ParameterSetter.

In the ParameterSetter you are going to want to call RandomHelper's setSeed 
method, as below:

----
public class MySimpleSetter extends SimpleParameterSetter {
  public void next(Parameters params) {
    RandomHelper.setSeed(System.currentTimeMillis());
  }
}
----

The above code will set the default uniform distribution's seed to be the 
current time. Now that the time is set, the agents or controller actions (in 
their runInitialize methods) can use the default distribution and will recieve 
numbers based off of that seed. For example if you had an agent that wanted to 
move based on some random condition, that could look like:

----
public void agentAction() {
  if (myHappiness < RandomHelper.nextDouble()) {
    move();
  }
}
----

The above example compares the agent's happiness to a random number between 0 
and 1, in (0, 1), if the random number is greater than the agent's happiness it 
will move.

=== Custom Random Engine and Streams
Advanced applications that require multiple different random streams
can use RandomHelper's registerGenerator(String, int) method.
This method will create a new random stream (a RandomEngine) with
the specified name and seed.This stream can then be used to create distributions.
See https://github.com/Repast/repast.simphony/blob/master/repast.simphony.core/src/repast/simphony/random/DefaultRandomRegistry.java[Simphony's DefaultRandomRegistry]
implementation for examples of how to create distributions from the RandomEngine.
RandomHelper's registerDistribution(String, AbstractDistribution) and getDistribution(String) 
methods can be used to store and retrieve custom distributions in and from
the RandomHelper.

For example,

----
public void customStreamExample {
   RandomEngine eng = RandomHelper.registerGenerator("MyStream", 42);
   Uniform myUniform = new Uniform(5, 10, eng);
   RandomHelper.registerDistribution("MyUniform", myUniform);
   ...
   Uniform uni = (Uniform)RandomHelper.getDistribution("MyUniform");
   double f = uni.nextDouble();
}
----
